#!/usr/bin/env bash
##
## (env bash because some people use other than the default - I do....)
##
## get the latest git tag for the repository in the CWD based on on our tagging conventions.
## this is designed to ignore tags that don't match the x.x.x convention

BLACK_B='\e[1;30m'
RED_B='\e[1;31m'
GREEN_B='\e[1;32m'
YELLOW_B='\e[1;33m'
BLUE_B='\e[1;34m'
PURPLE_B='\e[1;35m'
CYAN_B='\e[1;36m'
WHITE_B='\e[1;37m'
RESET='\e[0m'

## so first, let's make sure we're in a repository to begin with
git status > /dev/null 2>&1 || {
    echo -e "${RED_B}ERROR:${YELLOW_B} $(pwd)${RESET} does not appear to be a local repository!" >&2 && exit 1
}

## next, let's be sure the user has the most up2date tags from the remote
git fetch --tags > /dev/null 2>&1 || {
    echo -e "${RED_B}ERROR:${RESET} Unable to fetch tags for the ${YELLOW_B}$(basename $(git rev-parse --show-toplevel))${RESET} repository" >&2 && exit 1
}

## now we should be able to determine the latest git tag for this repository
## so list all tags, match against our tag-naming convention, sort this nonsense and keep the last one
## change the last integer in the version to .x
latest="$(git tag -l --sort "v:refname" | grep -E '^[0-9]{1,3}.[0-9]+.[0-9]+$' | tail -1 | sed -E 's/^([0-9]+.[0-9]+.)[0-9]+$/\1x/')"

## make sure the git command didn't fail (can't check $? here because that's the return status of the tail cmd)
## if any other commands failed, something is probably fundamentally wrong.
## and if we just didn't get anything for latest, well then something is wrong too...
[ "${PIPESTATUS[0]}" -ne 0 -o -z "$latest" ] && {
    echo -e "${RED_B}ERROR:${RESET} Unable to get the latest tag for the ${YELLOW_B}$(basename $(git rev-parse --show-toplevel))${RESET} repository" >&2 && exit 1
}

git checkout $latest && git pull origin $latest

exit 0
